{"version":3,"sources":["component/timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","year","month","days","hour","minute","second","_this2","endDate","Date","interval","setInterval","date","DateCalculator","setState","stop","clearInterval","value","String","length","diff","parse","timeLeft","years","hours","min","sec","millisec","Math","floor","countDown","react_default","a","createElement","className","addLeadingZeros","Component","App","timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d7cabe7.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Timer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            year: 2019,\n            month: props.month,\n            days: props.days,\n            hour: 8,\n            minute: 10,\n            second: 10,\n        }\n    }\n\n    componentDidMount() {\n        let endDate = new Date(this.state.year, this.state.month, this.state.days, this.state.hour, this.state.minute, this.state.second);\n        this.interval = setInterval(() => {\n            const date = this.DateCalculator(endDate);\n            date ? this.setState(date) : this.stop()\n        }, 1000)\n    }\n    componentWillUnmount() {\n        this.stop();\n    }\n\n    stop() {\n        clearInterval(this.interval);\n    }\n\n    addLeadingZeros(value) {\n        value = String(value);\n        while (value.length < 2) {\n            value = '0' + value;\n        }\n        return value;\n    }\n    DateCalculator(endDate) {\n        let diff = (Date.parse(endDate) - Date.parse(new Date())) / 1000;\n\n        // clear countdown when date is reached\n        if (diff <= 0) return false;\n\n        const timeLeft = {\n            years: 0,\n            days: 0,\n            hours: 0,\n            min: 0,\n            sec: 0,\n            millisec: 0,\n        };\n\n        // calculate time difference between now and expected date\n        if (diff >= (365.25 * 86400)) { // 365.25 * 24 * 60 * 60\n            timeLeft.years = Math.floor(diff / (365.25 * 86400));\n            diff -= timeLeft.years * 365.25 * 86400;\n        }\n        if (diff >= 86400) { // 24 * 60 * 60\n            timeLeft.days = Math.floor(diff / 86400);\n            diff -= timeLeft.days * 86400;\n        }\n        if (diff >= 3600) { // 60 * 60\n            timeLeft.hours = Math.floor(diff / 3600);\n            diff -= timeLeft.hours * 3600;\n        }\n        if (diff >= 60) {\n            timeLeft.min = Math.floor(diff / 60);\n            diff -= timeLeft.min * 60;\n        }\n        timeLeft.sec = diff;\n\n        return timeLeft;\n    }\n\n    render() {\n        const countDown = this.state;\n        return (\n            <div className=\"Countdown\">\n            <span className=\"Countdown-col\">\n              <span className=\"Countdown-col-element\">\n                  <strong>{this.addLeadingZeros(countDown.days)}</strong>\n                  <span>{countDown.days === 1 ? ' Day ' : ' Days '}</span>\n              </span>\n            </span>\n    \n            <span className=\"Countdown-col\">\n              <span className=\"Countdown-col-element\">\n                <strong>{this.addLeadingZeros(countDown.hours)}</strong>\n                <span> Hours </span>\n              </span>\n            </span>\n    \n    \n            <span className=\"Countdown-col\">\n              <span className=\"Countdown-col-element\">\n                <strong>{this.addLeadingZeros(countDown.min)}</strong>\n                <span> Min </span>\n              </span>\n            </span>\n    \n            <span className=\"Countdown-col\">\n              <span className=\"Countdown-col-element\">\n                <strong>{this.addLeadingZeros(countDown.sec)}</strong>\n                <span> Sec </span>\n              </span>\n            </span>\n          </div>\n        );\n    }\n\n}\n\nexport default Timer;","import React, { Component } from 'react';\nimport Timer from './component/timer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <h2>Marvel Cinematic Universe Movies</h2>\n        <header className=\"App-header\">\n          <h5>Captian Marvel</h5>\n          <Timer month=\"2\" days=\"8\"></Timer>\n\n          <h5>Avengers : End Game</h5>\n          <Timer month=\"3\" days=\"26\"></Timer>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}