{"version":3,"sources":["component/timer.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Timer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","year","month","days","hour","minute","second","_this2","endDate","Date","interval","setInterval","date","DateCalculator","setState","stop","clearInterval","value","String","length","diff","parse","timeLeft","years","hours","min","sec","millisec","Math","floor","countDown","react_default","a","createElement","className","addLeadingZeros","Component","App","src","logo","alt","timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7c3790a7.chunk.js","sourcesContent":["import React, {\r\n    Component\r\n} from 'react';\r\n\r\nclass Timer extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            year: 2019,\r\n            month: 1,\r\n            days: 5,\r\n            hour: 20,\r\n            minute: 59,\r\n            second: 59,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let endDate = new Date(this.state.year, this.state.month, this.state.days, this.state.hour, this.state.minute, this.state.second);\r\n        this.interval = setInterval(() => {\r\n            const date = this.DateCalculator(endDate);\r\n            date ? this.setState(date) : this.stop()\r\n        }, 1000)\r\n    }\r\n    componentWillUnmount() {\r\n        this.stop();\r\n    }\r\n\r\n    stop() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    addLeadingZeros(value) {\r\n        value = String(value);\r\n        while (value.length < 2) {\r\n            value = '0' + value;\r\n        }\r\n        return value;\r\n    }\r\n    DateCalculator(endDate) {\r\n        let diff = (Date.parse(endDate) - Date.parse(new Date())) / 1000;\r\n\r\n        // clear countdown when date is reached\r\n        if (diff <= 0) return false;\r\n\r\n        const timeLeft = {\r\n            years: 0,\r\n            days: 0,\r\n            hours: 0,\r\n            min: 0,\r\n            sec: 0,\r\n            millisec: 0,\r\n        };\r\n\r\n        // calculate time difference between now and expected date\r\n        if (diff >= (365.25 * 86400)) { // 365.25 * 24 * 60 * 60\r\n            timeLeft.years = Math.floor(diff / (365.25 * 86400));\r\n            diff -= timeLeft.years * 365.25 * 86400;\r\n        }\r\n        if (diff >= 86400) { // 24 * 60 * 60\r\n            timeLeft.days = Math.floor(diff / 86400);\r\n            diff -= timeLeft.days * 86400;\r\n        }\r\n        if (diff >= 3600) { // 60 * 60\r\n            timeLeft.hours = Math.floor(diff / 3600);\r\n            diff -= timeLeft.hours * 3600;\r\n        }\r\n        if (diff >= 60) {\r\n            timeLeft.min = Math.floor(diff / 60);\r\n            diff -= timeLeft.min * 60;\r\n        }\r\n        timeLeft.sec = diff;\r\n\r\n        return timeLeft;\r\n    }\r\n\r\n    render() {\r\n        const countDown = this.state;\r\n        return (\r\n            <div className=\"Countdown\">\r\n            <span className=\"Countdown-col\">\r\n              <span className=\"Countdown-col-element\">\r\n                  <strong>{this.addLeadingZeros(countDown.days)}</strong>\r\n                  <span>{countDown.days === 1 ? ' Day ' : ' Days '}</span>\r\n              </span>\r\n            </span>\r\n    \r\n            <span className=\"Countdown-col\">\r\n              <span className=\"Countdown-col-element\">\r\n                <strong>{this.addLeadingZeros(countDown.hours)}</strong>\r\n                <span> Hours </span>\r\n              </span>\r\n            </span>\r\n    \r\n    \r\n            <span className=\"Countdown-col\">\r\n              <span className=\"Countdown-col-element\">\r\n                <strong>{this.addLeadingZeros(countDown.min)}</strong>\r\n                <span> Min </span>\r\n              </span>\r\n            </span>\r\n    \r\n            <span className=\"Countdown-col\">\r\n              <span className=\"Countdown-col-element\">\r\n                <strong>{this.addLeadingZeros(countDown.sec)}</strong>\r\n                <span> Sec </span>\r\n              </span>\r\n            </span>\r\n          </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react';\nimport Timer from './component/timer';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h5>You have </h5>\n          <Timer></Timer>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}